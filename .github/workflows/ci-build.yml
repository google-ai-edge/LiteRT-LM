name: "CI"
on:
  push:
    branches:
    - main
    tags:
    - v*.*.*
  pull_request:
    branches:
    - main
  schedule:
    - cron: "0 10 * * *"  # Run at 2am PST (10am UTC) every day to refresh the cache.
  workflow_dispatch:   # Manual trigger
    inputs:
      REFRESH_CACHE:
        description: 'Refresh cache to remove unused files'
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  presubmit:
    name: "Presubmit"
    runs-on: Linux_runner_8_core
    permissions:
      contents: write  # For gh release upload.
    env:
      GH_TOKEN: ${{ github.token }}  # For gh release upload.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore bazel cache
        if: >  # Restore cache only when it's not triggered to refresh the cache.
          ! (github.event_name == 'schedule' ||
             (github.event_name == 'workflow_dispatch' && inputs.REFRESH_CACHE))
        uses: actions/cache/restore@v4
        id: bazel-cache
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazel-linux
            ~/.cache/bazel-android
          key: ${{ github.workflow }}-${{ hashFiles('**/WORKSPACE', '**/.bazelrc') }}-${{ hashFiles('**/BUILD*') }}-${{ github.sha }}
          restore-keys: |
            ${{ github.workflow }}-${{ hashFiles('**/WORKSPACE', '**/.bazelrc') }}-${{ hashFiles('**/BUILD*') }}-
            ${{ github.workflow }}-${{ hashFiles('**/WORKSPACE', '**/.bazelrc') }}-
            ${{ github.workflow }}-

      - name: Check cache hit
        run: |
          echo "Cache Hit: ${{ steps.bazel-cache.outputs.cache-hit }}"
          echo "Cache Primary Key: ${{ steps.bazel-cache.outputs.cache-primary-key }}"
          echo "Cache Matched Key: ${{ steps.bazel-cache.outputs.cache-matched-key }}"

      - name: Run bazel build on Linux
        run: |
          bazel build --disk_cache=~/.cache/bazel-linux --strip=always //...

      - name: Check if litert_lm_main doesn't link libLiteRtRuntimeCApi.so
        # Return exit code 1 if libLiteRtRuntimeCApi.so is required.
        run: |
          ! readelf -d bazel-bin/runtime/engine/litert_lm_main | grep libLiteRtRuntimeCApi.so

      - name: Update litert_lm_main prebuilt for Linux if new version tag is pushed.
        if: github.ref_type == 'tag'
        run: |
          cp bazel-bin/runtime/engine/litert_lm_main litert_lm_main.linux_x86_64
          gh release upload ${{ github.ref_name }} litert_lm_main.linux_x86_64 --clobber

      - name: Run bazel test on Linux
        run: |
          bazel test --disk_cache=~/.cache/bazel-linux --strip=always --test_output=errors //...

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r28b
          add-to-path: false

      - name: Run bazel build for Android
        run: |
          bazel build --disk_cache=~/.cache/bazel-android --config=android_arm64 --strip=always //...
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Update litert_lm_main prebuilt for Android if new version tag is pushed.
        if: github.ref_type == 'tag'
        run: |
          cp bazel-bin/runtime/engine/litert_lm_main litert_lm_main.android_arm64
          gh release upload ${{ github.ref_name }} litert_lm_main.android_arm64 --clobber

      - name: Save bazel cache if it's new and not triggered by pull request.
        uses: actions/cache/save@v4
        if: steps.bazel-cache.outputs.cache-hit != 'true' && github.event_name != 'pull_request'
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazel-linux
            ~/.cache/bazel-android
          key: ${{ github.workflow }}-${{ hashFiles('**/WORKSPACE', '**/.bazelrc') }}-${{ hashFiles('**/BUILD*') }}-${{ github.sha }}

